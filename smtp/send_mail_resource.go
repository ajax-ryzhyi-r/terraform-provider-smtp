package smtp

import (
	"context"
	"crypto/tls"
	"crypto/md5"
	"net/smtp"
	"fmt"

    "github.com/hashicorp/terraform-plugin-framework/resource"
    "github.com/hashicorp/terraform-plugin-framework/resource/schema"
    "github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
    "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
    "github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource              = &sendMailResource{}
	_ resource.ResourceWithConfigure = &sendMailResource{}
)

// NewOrderResource is a helper function to simplify the provider implementation.
func NewSendMailResource() resource.Resource {
	return &sendMailResource{}
}

// sendMailResource is the resource implementation.
type sendMailResource struct {
	client *client
}

type sendMailModel struct {
	ID          types.String `tfsdk:"id"`
	From        types.String `tfsdk:"from"`
	To          types.String `tfsdk:"to"`
	Subject     types.String `tfsdk:"subject"`
	Body        types.String `tfsdk:"body"`
}

// type mailModel struct {
// 	from    types.String `tfsdk:"from"`
// 	to      types.String `tfsdk:"to"`
// 	subject types.String `tfsdk:"subject"`
// 	body    types.String `tfsdk:"body"`
// }

// Configure adds the provider configured client to the resource.
func (r *sendMailResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*client)
}

// Metadata returns the resource type name.
func (r *sendMailResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_send_mail"
}

// Schema defines the schema for the resource.
func (r *sendMailResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Send a email with smtp. Note: At this moment authentication-less access to smtp and TLS validation is not support.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "Autogenerated id for the resource.",
				Computed: true,
			},
			// TODO: Accept to as List of ids
			// TODO: Allow cc and bcc
			"to": schema.StringAttribute{
				Description: "To email address. At this moment only one email id is supported. Multi recipient, cc and bcc are not supported. ",
				Required: true,
				PlanModifiers: []planmodifier.String{
                    stringplanmodifier.RequiresReplace(),
                },				
			},
			"from": schema.StringAttribute{
				Optional:    true,
				Description: "From email address. If not provided, the username used in the smtp auth will be used.",
			},
			"subject": schema.StringAttribute{
				Required: true,
				Description: "Subject of the email.",
				PlanModifiers: []planmodifier.String{
                    stringplanmodifier.RequiresReplace(),
                },	
			},
			"body": schema.StringAttribute{
				Required: true,
				Description: "Body of the email.",
				PlanModifiers: []planmodifier.String{
                    stringplanmodifier.RequiresReplace(),
                },	
			},
		},
	}
}

// Create creates the resource and sets the initial Terraform state.
func (r *sendMailResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	// Retrieve values from plan
	var plan sendMailModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	host_port := r.client.host + ":" + r.client.port
	// Connect to the SMTP server using a plain TCP connection.
	conn, err := smtp.Dial(host_port)
	if err != nil {
		resp.Diagnostics.AddError("Error connecting to SMTP server:", err.Error())
		return
	}

	// Upgrade the connection to TLS.
	err = conn.StartTLS(&tls.Config{ServerName: host_port, InsecureSkipVerify: true})
	if err != nil {
		resp.Diagnostics.AddError("Error upgrading connection to TLS:", err.Error())
		return
	}

	// Authenticate with the SMTP server.
	err = conn.Auth(r.client.auth)
	if err != nil {
		resp.Diagnostics.AddError("Error authenticating with SMTP server:", err.Error())
		return
	}

	// Set the sender and recipient addresses, and the email message.
	from := plan.From.ValueString() 
	if from == "" {
		from = r.client.username
	}
	to := []string{plan.To.ValueString()}
	msg := []byte("To: " + plan.To.ValueString() + "\r\n" +
		"Subject: " + plan.Subject.ValueString() + "\r\n" +
		"\r\n" +
		plan.Body.ValueString() + "\r\n")

	// Send the email.
	err = conn.Mail(from)
	if err != nil {
		resp.Diagnostics.AddError("Error setting sender address:", err.Error())
		return
	}
	for _, addr := range to {
		err = conn.Rcpt(addr)
		if err != nil {
			resp.Diagnostics.AddError("Error setting recipient address:", err.Error())
			return
		}
	}
	w, err := conn.Data()
	if err != nil {
		resp.Diagnostics.AddError("Error setting email message:", err.Error())
		return
	}
	_, err = w.Write(msg)
	if err != nil {
		resp.Diagnostics.AddError("Error setting email message:", err.Error())
		return
	}
	err = w.Close()
	if err != nil {
		resp.Diagnostics.AddError("Error sending email:", err.Error())
		return
	}

	tflog.Info(ctx, "Email sent successfully!")
	plan.ID = types.StringValue(fmt.Sprintf("%x", md5.Sum(msg)))

	// Set state to fully populated data
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

// Read refreshes the Terraform state with the latest data.
func (r *sendMailResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
}

// Update updates the resource and sets the updated Terraform state on success.
func (r *sendMailResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	// Retrieve values from plan
	var plan sendMailModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	host_port := r.client.host + ":" + r.client.port
	// Connect to the SMTP server using a plain TCP connection.
	conn, err := smtp.Dial(host_port)
	if err != nil {
		resp.Diagnostics.AddError("Error connecting to SMTP server:", err.Error())
		return
	}

	// Upgrade the connection to TLS.
	err = conn.StartTLS(&tls.Config{ServerName: host_port, InsecureSkipVerify: true})
	if err != nil {
		resp.Diagnostics.AddError("Error upgrading connection to TLS:", err.Error())
		return
	}

	// Authenticate with the SMTP server.
	err = conn.Auth(r.client.auth)
	if err != nil {
		resp.Diagnostics.AddError("Error authenticating with SMTP server:", err.Error())
		return
	}

	// Set the sender and recipient addresses, and the email message.
	to := []string{plan.To.ValueString()}
	msg := []byte("To: " + plan.To.ValueString() + "\r\n" +
		"Subject: " + plan.Subject.ValueString() + "\r\n" +
		"\r\n" +
		plan.Body.ValueString() + "\r\n")

	// Send the email.
	err = conn.Mail(plan.From.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error setting sender address:", err.Error())
		return
	}
	for _, addr := range to {
		err = conn.Rcpt(addr)
		if err != nil {
			resp.Diagnostics.AddError("Error setting recipient address:", err.Error())
			return
		}
	}
	w, err := conn.Data()
	if err != nil {
		resp.Diagnostics.AddError("Error setting email message:", err.Error())
		return
	}
	_, err = w.Write(msg)
	if err != nil {
		resp.Diagnostics.AddError("Error setting email message:", err.Error())
		return
	}
	err = w.Close()
	if err != nil {
		resp.Diagnostics.AddError("Error sending email:", err.Error())
		return
	}

	tflog.Info(ctx, "Email sent successfully!")
	plan.ID = types.StringValue(fmt.Sprintf("%x", md5.Sum(msg)))

	// Set state to fully populated data
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

}

// Delete deletes the resource and removes the Terraform state on success.
func (r *sendMailResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
}
